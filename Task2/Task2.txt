1) Weird Letter-

#include<bits/stdc++.h>

using namespace std;

int main()
{

    long long k, prime, m, tc, num, t = 4;

    cin>>tc;

    while (tc--){
        string arr, brr;
        cin >> arr >> brr;

        vector <pair<char, long long>> s, t; //making pair for two data types

        long long cnt = 1;
        for(long long i = 0; i < arr.size(); i++){
            if(arr[i] == arr[i + 1]) cnt++; //counting number of repeating letters for first string
            else{
                s.push_back(make_pair(arr[i], cnt)); //storing count of each letter
                cnt = 1;
            }
        }

        cnt = 1;
        for(long long i = 0; i < brr.size(); i++){
            if(brr[i] == brr[i + 1]) cnt++; //counting number of repeating letters for second string
            else{
                t.push_back(make_pair(brr[i], cnt)); //storing count for each letter
                cnt = 1;
            }
        }
        //if there is different letter in one of the string which is not present in other string
        if(s.size() != t.size()){
            cout << "NO" << endl;
            continue;
        }

        bool ck = true;
        for(long long i = 0; i < s.size(); i++){
        //checking if letters are same in both strings and count in first string is less than or equal to that of secong string
            if(s[i].first == t[i].first && s[i].second <= t[i].second) continue;
            else {
                cout << "NO" << endl;
                ck = false;
                break;
            }
        }

        if(ck == true) 
     cout << "YES" << endl;
    }
}

2)Simran the prankster-

#include <cmath>
#include <cstdio>
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
using namespace std;

int n;
long long int x;

bool compute(int a[], int i, long double val)
{
    if(i==n) // if last element is reached, check result equality
    {
        if(val==(long double)x)
            return true;
        else
            return false;
    }
    bool res;
    if(a[i]==0) // try only (+ or -) and *
        res=compute(a,i+1,val)||compute(a,i+1,0);
    else // try all operations
        res=compute(a,i+1,val+a[i])||compute(a,i+1,val-a[i])||compute(a,i+1,val*a[i])||compute(a,i+1,val/((long double)(a[i])));
    return res;
}

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        cin>>n>>x;
        int a[n];
        for(int i=0;i<n;i++)
            cin>>a[i];
        long double v=a[0];
        bool ans = compute(a,1,v); // recursively try combinations of operations to check for result equality
        if(ans)
            cout<<"YES\n";
        else
            cout<<"NO\n";
    }
    return 0;
}


3) Catch the Psycopath-

#include <cmath>
#include <cstdio>
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
using namespace std;
int p[10000];
void dfs(int* a,int i,int s,int n,int k)
{
    if(i>=n || a[i]== -1)  //check if index is not in range of n and also if it is not an element
    {
       return;
    }
   p[k++]=a[i];    //store element to print the path

    //check if given node has no children and satisfies the sum condition
    if((2*i+1>=n || a[2*i+1]== -1) && (2*i+2>=n || a[2*i+2]== -1) && s==a[i])
    {   //print the correct path
        for(int j=0;j<k;j++)
            cout<<p[j]<<" ";
        cout<<endl; 
    }
 
    dfs(a,2*i+1,s-a[i],n,k);   //call for left child 
    dfs(a,2*i+2,s-a[i],n,k);   //call for right child
   k--;      //decrement k to pop one element from path
}
int main()
{
    int n,i,m,j=0;
    cin>>n;
    int a[10000];

    for(i=0;i<n;i++)
    {   if(j>=1 && (j%2==1) && a[j/2]==-1) //check if parent is -1 then make this node as -1/null
        { 
          a[j++]=-1;
        }
        else if(j>=1 && (j%2==0) && a[(j/2)-1]==-1) ////check if parent is -1 then make this node as -1/null
        {
            a[j++]=-1;
        }
        else
        {
        cin>>a[j++];
        }
        if(a[j-1]== -1)  //if entry is -1 decrement i as it is not a correct entry
        i--;
    }
    cin>>m;
    dfs(a,0,m,j,0);     //calling fucntion

    return 0;
}

4) Fractalato-
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
     unsigned long long int n,u,up=1,down=0;
    cin>>n;
    if(n==0)     //if n is 0 then it is only one triangle
       cout<<"1";
   
    else{
        while(n--)     //counting the number of up and down triangles
        {
            u=up;
            up=(up*3+down)%1000000007;
            down=(down*3+u)%1000000007;
        }
  cout<<up;
    }  
    
    return 0;
}
