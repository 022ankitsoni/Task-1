1) Counterinsurgency-

#include <cmath>
#include <cstdio>
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
using namespace std;

int counts(int n, vector<int>& v) 
{
        if (n <= 0) return 1;
        int ans = 0;
        for (int i=0; i<n; ++i) {
            //for creating permutations
            if (v[i]%n==0 || n%v[i]==0) {
                swap(v[i], v[n-1]);  //swapping current v[i] and last element
                ans += counts(n-1, v); //counting total arrangements
                swap(v[i], v[n-1]);  //again swap to create different arrangement
            }
        }
        return ans;
}
int countArrangement(int N)
 {
        vector<int> v;
        for (int i=0; i<N; ++i) //creating a vector storing numbers from 1 to N
             v.push_back(i+1);
        return counts(N, v);   //calling counts function
 }

int main()
{
    int n;
    cin>>n;
    cout<<countArrangement(n);  //calling function
    return 0;
}
    
2) CS Graduate-

#include <iostream>
#include <iomanip>
#include <algorithm>
#include <string>
#include <string.h>
#include <vector>
#include <climits> 
#include <deque>
#include <queue>
#include <set>
#include <cmath>
using namespace std;

typedef long long ll;     //for creating alias to make easy typing
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef deque<int> di;
typedef deque<ii> dii;

int t,n,arr[110],d[110];

void dfs(int l, int r, int cur) {

    int mi=INT_MAX, miIdx;
    for (int i=l; i <= r; ++i) {
        if (mi > arr[i])   //finding minimum element in array
        {
            mi= arr[i];
            miIdx= i;
        }
    }
    d[miIdx]= cur;  //storing depths for each element

    if (miIdx > l) dfs(l,miIdx-1,cur+1); //calling dfs for left array elements 
    if (miIdx < r) dfs(miIdx+1,r,cur+1); //calling dfs for right array elements
}

int main() {
    
   
    cin >> t;
    while (t--) {
        cin >> n;
        for (int i=0; i < n; ++i) cin >> arr[i];
        dfs(0,n-1,0);
        for (int i=0; i < n; ++i) {
            if (i) cout << " ";
            cout << d[i];
        }
        cout << '\n';
    }
}

3) The Shawshank Redemption-

#include <bits/stdc++.h>
using namespace std;
 
 int n,m;
 char grid[1000][1000];
class QItem { //creating class for storing row,col,dist together
public:
    int row;
    int col;
    int dist;
    QItem(int x, int y, int w)
        : row(x), col(y), dist(w)
    {
    }
};
 
int minDistance()
{
    QItem source(0, 0, 0);  //creating object of class
 
    bool visited[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++)
        {
            if (grid[i][j] == '#')  //to keep track of obstacles
                visited[i][j] = true;
            else
                visited[i][j] = false;            
            
        }
    }
    source.row = 0;
    source.col = 0;
 
    queue<QItem> q;
    q.push(source);    
    visited[source.row][source.col] = true;
    while (!q.empty()) {
        QItem p = q.front();
        q.pop();
 
        // Destination found;
        if (p.row==n-1 && p.col==m-1 && grid[p.row][p.col] == '.')
            return p.dist;
 
        // moving up
        if (p.row - 1 >= 0 &&
            visited[p.row - 1][p.col] == false) {
            q.push(QItem(p.row - 1, p.col, p.dist + 1));
            visited[p.row - 1][p.col] = true;
        }
 
        // moving down
        if (p.row + 1 < n &&
            visited[p.row + 1][p.col] == false) {
            q.push(QItem(p.row + 1, p.col, p.dist + 1));
            visited[p.row + 1][p.col] = true;
        }
 
        // moving left
        if (p.col - 1 >= 0 &&
            visited[p.row][p.col - 1] == false) {
            q.push(QItem(p.row, p.col - 1, p.dist + 1));
            visited[p.row][p.col - 1] = true;
        }
 
         // moving right
        if (p.col + 1 < m &&
            visited[p.row][p.col + 1] == false) {
            q.push(QItem(p.row, p.col + 1, p.dist + 1));
            visited[p.row][p.col + 1] = true;
        }
    }
    return -1;
}
 
int main()
{   
    cin>>n>>m;
    for(int i=0;i<n;i++)
       for(int j=0;j<m;j++)
          cin>>grid[i][j];
    cout << minDistance();   //calling function
    return 0;
}

4) Counting the stairs-

#include <bits/stdc++.h>
using namespace std;
 
const int MOD = 1000000007;
 
// Function to return the number
// of ways to reach the kth step
int number_of_ways(int *arr, int n, int k)
{
    if (n == 1)
        return 1;
 
    // Create the dp array
    int dp[n + 1];
    memset(dp, -1, sizeof dp);
 
    // Broken steps
    for (int i = 0; i < k; i++)
        dp[arr[i]] = 0;
 
    dp[0] = 1;
    dp[1] = (dp[1] == -1) ? 1 : dp[1];
 
    // Calculate the number of ways for
    // the rest of the positions
    for (int i = 2; i <= n; ++i) {
 
        // If it is a blocked position
        if (dp[i] == 0)
            continue;
 
        // Number of ways to get to the ith step
        dp[i] = dp[i - 1] + dp[i - 2];
 
        dp[i] %= MOD;
    }
 
    // Return the required answer
    return dp[n];
}
int main() {
   int n,k;
   cin>>n>>k;
   int broken[k];
   for(int i=0;i<k;i++)
     cin>>broken[i];
   cout<<number_of_ways(broken,n,k);
   
    return 0;
}

5) Ranged Sum-

#include<bits/stdc++.h>

using namespace std;
 
const int N = 200001;
long long int ar[N];
long long int st[4*N];
 
long long int build(int si , int ss , int se)
{
    if(ss == se) return st[si] = ar[ss];
    
    int mid = (ss + se) >> 1;
    
    return st[si] = build(2*si , ss , mid) + build(2*si+1 , mid+1 , se);
}
 
void update(int si , int ss , int se , int idx , long long int value)
{
    if(idx > se || idx < ss) return;
    
    if(ss == se && ss == idx){
        st[si] += value;
        return;
    }
    
    int mid = (ss + se) >> 1;
    update(2*si , ss , mid , idx , value);
    update(2*si+1 , mid+1 , se , idx , value);
    st[si] = st[2*si] + st[2*si+1];
}
 
long long int getSum(int si , int ss , int se , int l , int r)
{
    if(l > se || r < ss) return 0;
    
    if(ss >= l && se <= r) return st[si];
    
    int mid = (ss + se) >> 1;
    return getSum(2*si , ss , mid , l , r) + getSum(2*si+1 , mid+1 , se , l , r);
}
 
int main()
{
    int n , q , a , b;
    cin>>n>>q;
    
    for(int i = 1; i <= n; i++) 
        cin>>ar[i];
    
    build(1 , 1 , n);
    while(q--)
    {
        int code;
        cin>>code>>a>>b;
        if(code == 1) {
          update(1 , 1 , n , a , b - ar[a]); ar[a] = b;}
        else         
          cout<<getSum(1 , 1 , n , a , b)<<endl;
    }
}
 